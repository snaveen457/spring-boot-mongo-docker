# Deployment for Spring Boot application
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-springappdeployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: springapp
  template:
    metadata:
      name: {{ .Release.Name }}-springapppod
      labels:
        app: springapp
    spec:
      containers:
        - name: springappcontainer
          image: dockerhandson/spring-boot-mongo
          ports:
            - containerPort: 8080
          env:
            - name: MONGO_DB_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-springappconfigmap
                  key: username
            - name: MONGO_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-springappsecrets
                  key: password
            - name: MONGO_DB_HOSTNAME
              value: mongo

# ReplicaSet for MongoDB
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: {{ .Release.Name }}-{{ .Values.mongodb.replicaSetName }}
spec:
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      name: {{ .Release.Name }}-mongodbpod
      labels:
        app: mongodb
    spec:
      volumes:
        - name: mongodb-pvc
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-pvc-hostpath
      containers:
        - name: {{ .Values.mongodb.containerName }}
          image: {{ .Values.mongodb.image }}
          ports:
            - containerPort: {{ .Values.mongodb.port }}
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-springappconfigmap
                  key: username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-springappsecrets
                  key: {{ .Values.mongodb.initdbRootPasswordKey }}
          volumeMounts:
            - name: mongodb-pvc
              mountPath: {{ .Values.mongodb.volumeMountPath }}

# Service for MongoDB
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.mongodb.service.name }}
spec:
  type: {{ .Values.mongodb.service.type }}
  selector:
    app: mongodb
  ports:
    - port: {{ .Values.mongodb.service.port }}
      targetPort: {{ .Values.mongodb.port }}

# ConfigMap for Spring Boot application
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-springappconfigmap
data:
  username: {{ .Values.springApp.configMap.username }}
  password: {{ .Values.springApp.configMap.password }}

# Secret for Spring Boot application
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-springappsecrets
type: Opaque
stringData:
  password: {{ .Values.springApp.secrets.password }}

# PersistentVolume for MongoDB data
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Release.Name }}-pv-hostpath
spec:
  storageClassName: {{ .Values.mongodb.persistentVolume.storageClassName }}
  capacity:
    storage: {{ .Values.mongodb.persistentVolume.storage }}
  accessModes:
    - {{ .Values.mongodb.persistentVolume.accessModes | quote }}

  hostPath:
    path: "{{ .Values.mongodb.persistentVolume.path }}"
    type: DirectoryOrCreate

# PersistentVolumeClaim for MongoDB data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-pvc-hostpath
spec:
  storageClassName: {{ .Values.mongodb.persistentVolumeClaim.storageClassName }}
  accessModes:
    - {{ .Values.mongodb.persistentVolumeClaim.accessModes | quote }}
  resources:
    requests:
      storage: {{ .Values.mongodb.persistentVolumeClaim.resources.requests.storage }}

